# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.benchmarking.TestBench.benchmarkRequestResponseT10

# Run progress: 0.00% complete, ETA 00:08:00
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 35454.668 ops/s
Iteration   1: 48705.258 ops/s
Iteration   2: 48786.003 ops/s
Iteration   3: 48336.992 ops/s
Iteration   4: 48837.541 ops/s
Iteration   5: 48256.634 ops/s

# Run progress: 12.50% complete, ETA 00:07:07
# Fork: 1 of 1
# Warmup Iteration   1: 44036.142 ops/s
Iteration   1: 48940.973 ops/s
Iteration   2: 48711.013 ops/s
Iteration   3: 49220.771 ops/s
Iteration   4: 47897.704 ops/s
Iteration   5: 48932.480 ops/s


Result "org.spr.benchmarking.TestBench.benchmarkRequestResponseT10":
  48740.588 ±(99.9%) 1943.412 ops/s [Average]
  (min, avg, max) = (47897.704, 48740.588, 49220.771), stdev = 504.698
  CI (99.9%): [46797.176, 50684.001] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.benchmarking.TestBench.benchmarkRequestResponseT20

# Run progress: 25.00% complete, ETA 00:06:06
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 45437.576 ops/s
Iteration   1: 54410.544 ops/s
Iteration   2: 53631.201 ops/s
Iteration   3: 52782.157 ops/s
Iteration   4: 51340.923 ops/s
Iteration   5: 48787.898 ops/s

# Run progress: 37.50% complete, ETA 00:05:05
# Fork: 1 of 1
# Warmup Iteration   1: 44482.652 ops/s
Iteration   1: 54454.339 ops/s
Iteration   2: 54825.868 ops/s
Iteration   3: 56522.534 ops/s
Iteration   4: 55026.754 ops/s
Iteration   5: 55536.101 ops/s


Result "org.spr.benchmarking.TestBench.benchmarkRequestResponseT20":
  55273.119 ±(99.9%) 3081.313 ops/s [Average]
  (min, avg, max) = (54454.339, 55273.119, 56522.534), stdev = 800.207
  CI (99.9%): [52191.806, 58354.432] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.benchmarking.TestBench.benchmarkRequestStreamT10

# Run progress: 50.00% complete, ETA 00:04:04
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 9357.379 ops/s
Iteration   1: 9506.725 ops/s
Iteration   2: 9008.123 ops/s
Iteration   3: 9522.693 ops/s
Iteration   4: 9610.659 ops/s
Iteration   5: 9637.832 ops/s

# Run progress: 62.50% complete, ETA 00:03:03
# Fork: 1 of 1
# Warmup Iteration   1: 9451.861 ops/s
Iteration   1: 9580.284 ops/s
Iteration   2: 9077.493 ops/s
Iteration   3: 9188.988 ops/s
Iteration   4: 9233.166 ops/s
Iteration   5: 9594.855 ops/s


Result "org.spr.benchmarking.TestBench.benchmarkRequestStreamT10":
  9334.957 ±(99.9%) 914.657 ops/s [Average]
  (min, avg, max) = (9077.493, 9334.957, 9594.855), stdev = 237.533
  CI (99.9%): [8420.300, 10249.614] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.benchmarking.TestBench.benchmarkRequestStreamT20

# Run progress: 75.00% complete, ETA 00:02:02
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 9218.965 ops/s
Iteration   1: 10578.931 ops/s
Iteration   2: 10102.665 ops/s
Iteration   3: 10294.168 ops/s
Iteration   4: 10487.265 ops/s
Iteration   5: 10336.696 ops/s

# Run progress: 87.50% complete, ETA 00:01:01
# Fork: 1 of 1
# Warmup Iteration   1: 8974.959 ops/s
Iteration   1: 9948.736 ops/s
Iteration   2: 9769.628 ops/s
Iteration   3: 9946.833 ops/s
Iteration   4: 9948.789 ops/s
Iteration   5: 9981.737 ops/s


Result "org.spr.benchmarking.TestBench.benchmarkRequestStreamT20":
  9919.144 ±(99.9%) 326.705 ops/s [Average]
  (min, avg, max) = (9769.628, 9919.144, 9981.737), stdev = 84.844
  CI (99.9%): [9592.439, 10245.849] (assumes normal distribution)


# Run complete. Total time: 00:08:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                               Mode  Cnt      Score      Error  Units
TestBench.benchmarkRequestResponseT10  thrpt    5  48740.588 ± 1943.412  ops/s
TestBench.benchmarkRequestResponseT20  thrpt    5  55273.119 ± 3081.313  ops/s
TestBench.benchmarkRequestStreamT10    thrpt    5   9334.957 ±  914.657  ops/s
TestBench.benchmarkRequestStreamT20    thrpt    5   9919.144 ±  326.705  ops/s

Benchmark result is saved to rsocket-results.csv