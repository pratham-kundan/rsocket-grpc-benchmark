# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.JMHBenchmarks.SizedTestBench.benchmarkRequestResponseT10

# Run progress: 0.00% complete, ETA 00:08:00
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 205.726 ops/s
Iteration   1: 236.449 ops/s
Iteration   2: 258.561 ops/s
Iteration   3: 258.698 ops/s
Iteration   4: 265.761 ops/s
Iteration   5: 270.737 ops/s

# Run progress: 12.50% complete, ETA 00:07:09
# Fork: 1 of 1
# Warmup Iteration   1: 235.528 ops/s
Iteration   1: 261.096 ops/s
Iteration   2: 271.625 ops/s
Iteration   3: 270.974 ops/s
Iteration   4: 271.562 ops/s
Iteration   5: 269.332 ops/s


Result "org.spr.JMHBenchmarks.SizedTestBench.benchmarkRequestResponseT10":
  268.918 ±(99.9%) 17.210 ops/s [Average]
  (min, avg, max) = (261.096, 268.918, 271.625), stdev = 4.469
  CI (99.9%): [251.708, 286.127] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.JMHBenchmarks.SizedTestBench.benchmarkRequestResponseT20

# Run progress: 25.00% complete, ETA 00:06:08
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 234.698 ops/s
Iteration   1: 260.589 ops/s
Iteration   2: 264.351 ops/s
Iteration   3: 267.179 ops/s
Iteration   4: 269.076 ops/s
Iteration   5: 268.070 ops/s

# Run progress: 37.50% complete, ETA 00:05:08
# Fork: 1 of 1
# Warmup Iteration   1: 238.711 ops/s
Iteration   1: 255.398 ops/s
Iteration   2: 263.749 ops/s
Iteration   3: 265.506 ops/s
Iteration   4: 269.818 ops/s
Iteration   5: 269.468 ops/s


Result "org.spr.JMHBenchmarks.SizedTestBench.benchmarkRequestResponseT20":
  264.788 ±(99.9%) 22.533 ops/s [Average]
  (min, avg, max) = (255.398, 264.788, 269.818), stdev = 5.852
  CI (99.9%): [242.254, 287.321] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.JMHBenchmarks.SizedTestBench.benchmarkRequestStreamT10

# Run progress: 50.00% complete, ETA 00:04:07
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 63.586 ops/s
Iteration   1: 71.327 ops/s
Iteration   2: 73.631 ops/s
Iteration   3: 72.046 ops/s
Iteration   4: 73.232 ops/s
Iteration   5: 71.358 ops/s

# Run progress: 62.50% complete, ETA 00:03:06
# Fork: 1 of 1
# Warmup Iteration   1: 65.043 ops/s
Iteration   1: 69.758 ops/s
Iteration   2: 73.330 ops/s
Iteration   3: 70.665 ops/s
Iteration   4: 68.029 ops/s
Iteration   5: 70.540 ops/s


Result "org.spr.JMHBenchmarks.SizedTestBench.benchmarkRequestStreamT10":
  70.465 ±(99.9%) 7.379 ops/s [Average]
  (min, avg, max) = (68.029, 70.465, 73.330), stdev = 1.916
  CI (99.9%): [63.085, 77.844] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.JMHBenchmarks.SizedTestBench.benchmarkRequestStreamT20

# Run progress: 75.00% complete, ETA 00:02:04
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 62.514 ops/s
Iteration   1: 67.656 ops/s
Iteration   2: 69.488 ops/s
Iteration   3: 69.398 ops/s
Iteration   4: 71.469 ops/s
Iteration   5: 70.475 ops/s

# Run progress: 87.50% complete, ETA 00:01:02
# Fork: 1 of 1
# Warmup Iteration   1: 59.850 ops/s
Iteration   1: 68.267 ops/s
Iteration   2: 69.370 ops/s
Iteration   3: 68.785 ops/s
Iteration   4: 69.851 ops/s
Iteration   5: 69.982 ops/s


Result "org.spr.JMHBenchmarks.SizedTestBench.benchmarkRequestStreamT20":
  69.251 ±(99.9%) 2.786 ops/s [Average]
  (min, avg, max) = (68.267, 69.251, 69.982), stdev = 0.724
  CI (99.9%): [66.465, 72.037] (assumes normal distribution)


# Run complete. Total time: 00:08:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                  Mode  Cnt    Score    Error  Units
JMHBenchmarks.SizedTestBench.benchmarkRequestResponseT10  thrpt    5  268.918 ± 17.210  ops/s
JMHBenchmarks.SizedTestBench.benchmarkRequestResponseT20  thrpt    5  264.788 ± 22.533  ops/s
JMHBenchmarks.SizedTestBench.benchmarkRequestStreamT10    thrpt    5   70.465 ±  7.379  ops/s
JMHBenchmarks.SizedTestBench.benchmarkRequestStreamT20    thrpt    5   69.251 ±  2.786  ops/s

Benchmark result is saved to grpc-db-results.csv