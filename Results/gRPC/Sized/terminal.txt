# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.SizedTestBench.benchmarkRequestResponseT10

# Run progress: 0.00% complete, ETA 00:08:00
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 304.196 ops/s
Iteration   1: 375.445 ops/s
Iteration   2: 383.381 ops/s
Iteration   3: 405.476 ops/s
Iteration   4: 405.958 ops/s
Iteration   5: 398.141 ops/s

# Run progress: 12.50% complete, ETA 00:07:09
# Fork: 1 of 1
# Warmup Iteration   1: 353.231 ops/s
Iteration   1: 368.074 ops/s
Iteration   2: 367.185 ops/s
Iteration   3: 372.668 ops/s
Iteration   4: 375.605 ops/s
Iteration   5: 373.630 ops/s


Result "org.spr.SizedTestBench.benchmarkRequestResponseT10":
  371.432 ±(99.9%) 14.028 ops/s [Average]
  (min, avg, max) = (367.185, 371.432, 375.605), stdev = 3.643
  CI (99.9%): [357.404, 385.460] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.SizedTestBench.benchmarkRequestResponseT20

# Run progress: 25.00% complete, ETA 00:06:07
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 382.345 ops/s
Iteration   1: 415.288 ops/s
Iteration   2: 419.453 ops/s
Iteration   3: 422.381 ops/s
Iteration   4: 414.991 ops/s
Iteration   5: 418.739 ops/s

# Run progress: 37.50% complete, ETA 00:05:07
# Fork: 1 of 1
# Warmup Iteration   1: 382.417 ops/s
Iteration   1: 416.065 ops/s
Iteration   2: 423.486 ops/s
Iteration   3: 431.677 ops/s
Iteration   4: 429.980 ops/s
Iteration   5: 428.910 ops/s


Result "org.spr.SizedTestBench.benchmarkRequestResponseT20":
  426.024 ±(99.9%) 24.473 ops/s [Average]
  (min, avg, max) = (416.065, 426.024, 431.677), stdev = 6.355
  CI (99.9%): [401.551, 450.496] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.SizedTestBench.benchmarkRequestStreamT10

# Run progress: 50.00% complete, ETA 00:04:06
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 117.324 ops/s
Iteration   1: 139.158 ops/s
Iteration   2: 137.418 ops/s
Iteration   3: 136.335 ops/s
Iteration   4: 140.107 ops/s
Iteration   5: 136.154 ops/s

# Run progress: 62.50% complete, ETA 00:03:04
# Fork: 1 of 1
# Warmup Iteration   1: 118.968 ops/s
Iteration   1: 135.233 ops/s
Iteration   2: 136.719 ops/s
Iteration   3: 137.443 ops/s
Iteration   4: 135.424 ops/s
Iteration   5: 138.354 ops/s


Result "org.spr.SizedTestBench.benchmarkRequestStreamT10":
  136.635 ±(99.9%) 5.111 ops/s [Average]
  (min, avg, max) = (135.233, 136.635, 138.354), stdev = 1.327
  CI (99.9%): [131.524, 141.745] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.SizedTestBench.benchmarkRequestStreamT20

# Run progress: 75.00% complete, ETA 00:02:03
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 119.671 ops/s
Iteration   1: 138.728 ops/s
Iteration   2: 139.000 ops/s
Iteration   3: 137.748 ops/s
Iteration   4: 139.030 ops/s
Iteration   5: 139.353 ops/s

# Run progress: 87.50% complete, ETA 00:01:01
# Fork: 1 of 1
# Warmup Iteration   1: 120.669 ops/s
Iteration   1: 139.541 ops/s
Iteration   2: 140.126 ops/s
Iteration   3: 137.710 ops/s
Iteration   4: 137.483 ops/s
Iteration   5: 139.135 ops/s


Result "org.spr.SizedTestBench.benchmarkRequestStreamT20":
  138.799 ±(99.9%) 4.450 ops/s [Average]
  (min, avg, max) = (137.483, 138.799, 140.126), stdev = 1.156
  CI (99.9%): [134.348, 143.249] (assumes normal distribution)


# Run complete. Total time: 00:08:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                    Mode  Cnt    Score    Error  Units
SizedTestBench.benchmarkRequestResponseT10  thrpt    5  371.432 ± 14.028  ops/s
SizedTestBench.benchmarkRequestResponseT20  thrpt    5  426.024 ± 24.473  ops/s
SizedTestBench.benchmarkRequestStreamT10    thrpt    5  136.635 ±  5.111  ops/s
SizedTestBench.benchmarkRequestStreamT20    thrpt    5  138.799 ±  4.450  ops/s

Benchmark result is saved to grpc-db-results.csv