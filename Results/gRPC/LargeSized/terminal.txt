# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.JmhBenchmarks.SizedTestBench.benchmarkRequestResponseT10

# Run progress: 0.00% complete, ETA 00:08:00
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 31.362 ops/s
Iteration   1: 40.595 ops/s
Iteration   2: 44.453 ops/s
Iteration   3: 43.658 ops/s
Iteration   4: 43.749 ops/s
Iteration   5: 43.582 ops/s

# Run progress: 12.50% complete, ETA 00:07:26
# Fork: 1 of 1
# Warmup Iteration   1: 34.948 ops/s
Iteration   1: 42.051 ops/s
Iteration   2: 42.668 ops/s
Iteration   3: 42.592 ops/s
Iteration   4: 42.104 ops/s
Iteration   5: 40.855 ops/s


Result "org.spr.JmhBenchmarks.SizedTestBench.benchmarkRequestResponseT10":
  42.054 ±(99.9%) 2.795 ops/s [Average]
  (min, avg, max) = (40.855, 42.054, 42.668), stdev = 0.726
  CI (99.9%): [39.259, 44.849] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.JmhBenchmarks.SizedTestBench.benchmarkRequestResponseT20

# Run progress: 25.00% complete, ETA 00:06:23
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 31.460 ops/s
Iteration   1: 37.267 ops/s
Iteration   2: 40.481 ops/s
Iteration   3: 41.245 ops/s
Iteration   4: 40.756 ops/s
Iteration   5: 41.580 ops/s

# Run progress: 37.50% complete, ETA 00:05:31
# Fork: 1 of 1
# Warmup Iteration   1: 33.736 ops/s
Iteration   1: 40.763 ops/s
Iteration   2: 40.456 ops/s
Iteration   3: 39.254 ops/s
Iteration   4: 40.516 ops/s
Iteration   5: 39.265 ops/s


Result "org.spr.JmhBenchmarks.SizedTestBench.benchmarkRequestResponseT20":
  40.051 ±(99.9%) 2.817 ops/s [Average]
  (min, avg, max) = (39.254, 40.051, 40.763), stdev = 0.732
  CI (99.9%): [37.234, 42.868] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.JmhBenchmarks.SizedTestBench.benchmarkRequestStreamT10

# Run progress: 50.00% complete, ETA 00:04:29
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 10.126 ops/s
Iteration   1: 13.487 ops/s
Iteration   2: 13.195 ops/s
Iteration   3: 12.829 ops/s
Iteration   4: 12.354 ops/s
Iteration   5: 11.516 ops/s

# Run progress: 62.50% complete, ETA 00:03:23
# Fork: 1 of 1
# Warmup Iteration   1: 9.652 ops/s
Iteration   1: 12.232 ops/s
Iteration   2: 12.716 ops/s
Iteration   3: 13.237 ops/s
Iteration   4: 12.861 ops/s
Iteration   5: 13.365 ops/s


Result "org.spr.JmhBenchmarks.SizedTestBench.benchmarkRequestStreamT10":
  12.882 ±(99.9%) 1.733 ops/s [Average]
  (min, avg, max) = (12.232, 12.882, 13.365), stdev = 0.450
  CI (99.9%): [11.150, 14.615] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.JmhBenchmarks.SizedTestBench.benchmarkRequestStreamT20

# Run progress: 75.00% complete, ETA 00:02:15
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 9.809 ops/s
Iteration   1: 11.567 ops/s
Iteration   2: 11.472 ops/s
Iteration   3: 10.981 ops/s
Iteration   4: 11.004 ops/s
Iteration   5: 11.015 ops/s

# Run progress: 87.50% complete, ETA 00:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 9.990 ops/s
Iteration   1: 12.560 ops/s
Iteration   2: 12.056 ops/s
Iteration   3: 12.204 ops/s
Iteration   4: 12.541 ops/s
Iteration   5: 11.626 ops/s


Result "org.spr.JmhBenchmarks.SizedTestBench.benchmarkRequestStreamT20":
  12.197 ±(99.9%) 1.486 ops/s [Average]
  (min, avg, max) = (11.626, 12.197, 12.560), stdev = 0.386
  CI (99.9%): [10.711, 13.684] (assumes normal distribution)


# Run complete. Total time: 00:09:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                  Mode  Cnt   Score   Error  Units
JmhBenchmarks.SizedTestBench.benchmarkRequestResponseT10  thrpt    5  42.054 ± 2.795  ops/s
JmhBenchmarks.SizedTestBench.benchmarkRequestResponseT20  thrpt    5  40.051 ± 2.817  ops/s
JmhBenchmarks.SizedTestBench.benchmarkRequestStreamT10    thrpt    5  12.882 ± 1.733  ops/s
JmhBenchmarks.SizedTestBench.benchmarkRequestStreamT20    thrpt    5  12.197 ± 1.486  ops/s

Benchmark result is saved to grpc-db-results.csv