# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.benchmarking.TestBenchDto.benchmarkRequestResponseDtoT10

# Run progress: 0.00% complete, ETA 00:08:00
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 34451.561 ops/s
Iteration   1: 48222.968 ops/s
Iteration   2: 46600.275 ops/s
Iteration   3: 46918.950 ops/s
Iteration   4: 46249.354 ops/s
Iteration   5: 45314.407 ops/s

# Run progress: 12.50% complete, ETA 00:07:07
# Fork: 1 of 1
# Warmup Iteration   1: 38794.135 ops/s
Iteration   1: 45698.495 ops/s
Iteration   2: 45829.039 ops/s
Iteration   3: 46768.341 ops/s
Iteration   4: 47355.524 ops/s
Iteration   5: 47646.105 ops/s


Result "org.spr.benchmarking.TestBenchDto.benchmarkRequestResponseDtoT10":
  46659.501 ±(99.9%) 3380.506 ops/s [Average]
  (min, avg, max) = (45698.495, 46659.501, 47646.105), stdev = 877.907
  CI (99.9%): [43278.995, 50040.007] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.benchmarking.TestBenchDto.benchmarkRequestResponseDtoT20

# Run progress: 25.00% complete, ETA 00:06:06
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 48807.622 ops/s
Iteration   1: 53256.420 ops/s
Iteration   2: 51781.202 ops/s
Iteration   3: 51650.031 ops/s
Iteration   4: 51305.001 ops/s
Iteration   5: 52654.385 ops/s

# Run progress: 37.50% complete, ETA 00:05:05
# Fork: 1 of 1
# Warmup Iteration   1: 44467.499 ops/s
Iteration   1: 50769.409 ops/s
Iteration   2: 50625.529 ops/s
Iteration   3: 51965.459 ops/s
Iteration   4: 53036.235 ops/s
Iteration   5: 53129.112 ops/s


Result "org.spr.benchmarking.TestBenchDto.benchmarkRequestResponseDtoT20":
  51905.149 ±(99.9%) 4600.033 ops/s [Average]
  (min, avg, max) = (50625.529, 51905.149, 53129.112), stdev = 1194.614
  CI (99.9%): [47305.116, 56505.182] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.benchmarking.TestBenchDto.benchmarkRequestStreamDtoT10

# Run progress: 50.00% complete, ETA 00:04:04
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 6530.527 ops/s
Iteration   1: 7234.213 ops/s
Iteration   2: 7250.919 ops/s
Iteration   3: 7265.850 ops/s
Iteration   4: 7416.277 ops/s
Iteration   5: 7321.299 ops/s

# Run progress: 62.50% complete, ETA 00:03:03
# Fork: 1 of 1
# Warmup Iteration   1: 6427.472 ops/s
Iteration   1: 6906.010 ops/s
Iteration   2: 6874.194 ops/s
Iteration   3: 6905.380 ops/s
Iteration   4: 6693.935 ops/s
Iteration   5: 6694.731 ops/s


Result "org.spr.benchmarking.TestBenchDto.benchmarkRequestStreamDtoT10":
  6814.850 ±(99.9%) 426.520 ops/s [Average]
  (min, avg, max) = (6693.935, 6814.850, 6906.010), stdev = 110.766
  CI (99.9%): [6388.330, 7241.370] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.benchmarking.TestBenchDto.benchmarkRequestStreamDtoT20

# Run progress: 75.00% complete, ETA 00:02:02
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 5480.493 ops/s
Iteration   1: 7565.460 ops/s
Iteration   2: 7582.111 ops/s
Iteration   3: 7582.265 ops/s
Iteration   4: 7531.806 ops/s
Iteration   5: 7586.767 ops/s

# Run progress: 87.50% complete, ETA 00:01:01
# Fork: 1 of 1
# Warmup Iteration   1: 6084.292 ops/s
Iteration   1: 7295.761 ops/s
Iteration   2: 7227.531 ops/s
Iteration   3: 7213.679 ops/s
Iteration   4: 7274.864 ops/s
Iteration   5: 7330.974 ops/s


Result "org.spr.benchmarking.TestBenchDto.benchmarkRequestStreamDtoT20":
  7268.562 ±(99.9%) 186.373 ops/s [Average]
  (min, avg, max) = (7213.679, 7268.562, 7330.974), stdev = 48.401
  CI (99.9%): [7082.189, 7454.935] (assumes normal distribution)


# Run complete. Total time: 00:08:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                     Mode  Cnt      Score      Error  Units
TestBenchDto.benchmarkRequestResponseDtoT10  thrpt    5  46659.501 ± 3380.506  ops/s
TestBenchDto.benchmarkRequestResponseDtoT20  thrpt    5  51905.149 ± 4600.033  ops/s
TestBenchDto.benchmarkRequestStreamDtoT10    thrpt    5   6814.850 ±  426.520  ops/s
TestBenchDto.benchmarkRequestStreamDtoT20    thrpt    5   7268.562 ±  186.373  ops/s

Benchmark result is saved to rsocket-results.csv