# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.benchmarking.SizedTestBench.benchmarkSizedRequestResponseT10

# Run progress: 0.00% complete, ETA 00:08:00
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 15.006 ops/s
Iteration   1: 16.142 ops/s
Iteration   2: 16.977 ops/s
Iteration   3: 15.768 ops/s
Iteration   4: 16.293 ops/s
Iteration   5: 15.600 ops/s

# Run progress: 12.50% complete, ETA 00:07:50
# Fork: 1 of 1
# Warmup Iteration   1: 14.262 ops/s
Iteration   1: 15.831 ops/s
Iteration   2: 16.577 ops/s
Iteration   3: 17.033 ops/s
Iteration   4: 17.132 ops/s
Iteration   5: 17.073 ops/s


Result "org.spr.benchmarking.SizedTestBench.benchmarkSizedRequestResponseT10":
  16.729 ±(99.9%) 2.112 ops/s [Average]
  (min, avg, max) = (15.831, 16.729, 17.132), stdev = 0.548
  CI (99.9%): [14.617, 18.841] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.benchmarking.SizedTestBench.benchmarkSizedRequestResponseT20

# Run progress: 25.00% complete, ETA 00:06:41
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 15.793 ops/s
Iteration   1: 18.568 ops/s
Iteration   2: 18.149 ops/s
Iteration   3: 18.502 ops/s
Iteration   4: 18.192 ops/s
Iteration   5: 18.151 ops/s

# Run progress: 37.50% complete, ETA 00:05:49
# Fork: 1 of 1
# Warmup Iteration   1: 16.645 ops/s
Iteration   1: 18.637 ops/s
Iteration   2: 18.248 ops/s
Iteration   3: 18.758 ops/s
Iteration   4: 18.169 ops/s
Iteration   5: 18.847 ops/s


Result "org.spr.benchmarking.SizedTestBench.benchmarkSizedRequestResponseT20":
  18.532 ±(99.9%) 1.176 ops/s [Average]
  (min, avg, max) = (18.169, 18.532, 18.847), stdev = 0.305
  CI (99.9%): [17.356, 19.707] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.benchmarking.SizedTestBench.benchmarkSizedRequestStreamT10

# Run progress: 50.00% complete, ETA 00:04:42
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 6.443 ops/s
Iteration   1: 6.942 ops/s
Iteration   2: 6.819 ops/s
Iteration   3: 7.005 ops/s
Iteration   4: 7.405 ops/s
Iteration   5: 6.787 ops/s

# Run progress: 62.50% complete, ETA 00:03:34
# Fork: 1 of 1
# Warmup Iteration   1: 6.007 ops/s
Iteration   1: 6.349 ops/s
Iteration   2: 6.270 ops/s
Iteration   3: 7.544 ops/s
Iteration   4: 7.244 ops/s
Iteration   5: 7.329 ops/s


Result "org.spr.benchmarking.SizedTestBench.benchmarkSizedRequestStreamT10":
  6.947 ±(99.9%) 2.284 ops/s [Average]
  (min, avg, max) = (6.270, 6.947, 7.544), stdev = 0.593
  CI (99.9%): [4.663, 9.232] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.7, Java HotSpot(TM) 64-Bit Server VM, 17.0.7+8-LTS-224
# VM invoker: /Users/prathamkundan/Desktop/bin/java/jdk-17.0.7.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=IN -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.spr.benchmarking.SizedTestBench.benchmarkSizedRequestStreamT20

# Run progress: 75.00% complete, ETA 00:02:24
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 6.663 ops/s
Iteration   1: 7.330 ops/s
Iteration   2: 7.071 ops/s
Iteration   3: 6.903 ops/s
Iteration   4: 7.273 ops/s
Iteration   5: 7.223 ops/s

# Run progress: 87.50% complete, ETA 00:01:15
# Fork: 1 of 1
# Warmup Iteration   1: 6.763 ops/s
Iteration   1: 7.511 ops/s
Iteration   2: 7.072 ops/s
Iteration   3: 7.328 ops/s
Iteration   4: 7.362 ops/s
Iteration   5: 7.090 ops/s


Result "org.spr.benchmarking.SizedTestBench.benchmarkSizedRequestStreamT20":
  7.273 ±(99.9%) 0.724 ops/s [Average]
  (min, avg, max) = (7.072, 7.273, 7.511), stdev = 0.188
  CI (99.9%): [6.549, 7.996] (assumes normal distribution)


# Run complete. Total time: 00:10:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                         Mode  Cnt   Score   Error  Units
SizedTestBench.benchmarkSizedRequestResponseT10  thrpt    5  16.729 ± 2.112  ops/s
SizedTestBench.benchmarkSizedRequestResponseT20  thrpt    5  18.532 ± 1.176  ops/s
SizedTestBench.benchmarkSizedRequestStreamT10    thrpt    5   6.947 ± 2.284  ops/s
SizedTestBench.benchmarkSizedRequestStreamT20    thrpt    5   7.273 ± 0.724  ops/s

Benchmark result is saved to rsocket-results.csv